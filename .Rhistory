color = c('red', 'blue', 'orange', 'black')
colors = factor(color)
pattern <- sample(colors, 500, replace = TRUE)
pattern1 <- data.frame(pattern)
pattern2 <- matrix(pattern)
colors1 <- list('red', 'blue', 'orange', 'black')
patternl <- sample(colors1, 500, replace = TRUE)
color = c('red', 'blue', 'orange', 'black')
colors = factor(color)
pattern <- sample(colors, 500, replace = TRUE)
pattern1 <- data.frame(pattern)
pattern2 <- matrix(pattern)
colors1 <- list('red', 'blue', 'orange', 'black')
patternl <- sample(colors1, 500, replace = TRUE)
ata("cars")
cars2 <- cars
colnames(cars2) <- c("m/s", "m")
figure <- plot(cars2$`m/s`, cars2$m, main="scatterplot",xlab="speed", ylab="dist") + abline(lm(cars2$m~cars2$`m/s`))
cars$dist2 <- 3.6*cars$dist
clear
cls
data("cars")
cars
View(cars)
View(cars2)
View(cars)
View(pattern1)
age <- c(13, 15, 16, 16, 19, 20, 20, 21, 22, 22, 25, 25, 25, 25, 30, 33, 33, 35, 35, 35, 35, 36, 40, 45, 46, 52, 70)
mean(age) #29.96296
# Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
mode <- getmode(age)
midrange <- (max(age) + min(age))/2
summary(age)
quantile(age)
boxplot(age)
age_adults <- c(23, 23, 27, 27, 39, 41, 47, 49, 50, 52, 54, 54, 56, 57, 58, 58, 60, 61)
percent_fat <- c(9.5, 26.5, 7.8, 17.8, 31.4, 25.9, 27.4, 27.2, 31.2, 34.6, 42.5, 28.8, 33.4, 30.2, 34.1, 32.9, 41.2, 35.7)
hopital_test <- data.frame(age_adults, percent_fat)
mean(age_adults)
median(age_adults)
sd(age_adults)
mean(percent_fat)
median(percent_fat)
sd(percent_fat)
figure2 <- plot(hopital_test$age_adults, hopital_test$percent_fat, main="scatterplot",xlab="age", ylab="%fat")
cor(age_adults,percent_fat)
binning <- function(x, bin_size, FUN = mean) {
len <- length(x)
y <- vector()
for(i in 1:len) {
k <- i %% bin_size
if(k == 0) { k0 <- i - bin_size + 1
} else { k0 <- i - k + 1 }
k1 <- k0 + bin_size - 1
if(k1 > len) { k1 <- len }
y[i] <- FUN(x[k0:k1])
}
return(y)
}
bouquets_by_province <- aggregate(florist$bouquet,by=list(florist$year, florist$sender_province), FUN = sum)
min_max_nom <- function(x,new_max=1,new_min=0,na.rm=TRUE){
min_x = min(x,na.rm)
max_x = max(x,na.rm)
new_x <- (x-min_x)/(max_x-min_x)*(new_max-new_min)+new_min
return(new_x)
}
x = bouquets_by_province$total
province_norm_1 = min_max_nom(x,1,0,TRUE)
#z-score normalization
x_new = (x-mean(x))/sd(x)
iris
iris$Species <- NULL
k<-3
iris.scaled <- scale(iris)
cluster <- kmeans(iris.scaled,k,nstart = 20)
library(factoextra)
fviz_cluster(kmeans,data=iris.scaled,type.frame="norm", ellipse="norm")
fviz_nbcluster(data.iris.scaled,kmeans,ellipse.type="norm")
k.max <- 20
data = iris
wss <- sapply(1:k.max, function(k){kmeans(data,k)$tot.withinss})
plot(1:k.max,wss)
abline(v=3,lty=2)
#Euclidian distance
euclidian <- function(x,y){
z = rbind(x,y)
squaredSum = sum((diff(z)**2))
distance = sqrt(squaredSum)
return(sqrt(sum((diff(rbind(x,y))**2))))
}
x = c(2,2)
y = c(0,0)
distance = euclidian(x,y)
distance
boxplot(roses)
#Exercise 2.1
florist <- read.table("C:/Users/user/Desktop/florist.txt", header = T, sep = ",")
florist_by_day <- aggregate(florist$price, by=list(florist$date), FUN = length)
#sum
names(florist_by_day) <- c('date', 'no_of_bouquets')
roses <- subset(florist, florist$bouquet=="roses")
roses_by_day <- aggregate(roses$price, by = list(roses$date), FUN = sum)
plot(roses_by_day)
outval = boxplot(roses_by_day, plot=FALSE)
boxplot(roses)
summary(roses)
florist <- read.table("C:/Users/user/Desktop/florist.txt", header = T, sep = ",")
florist_by_day <- aggregate(florist$price, by=list(florist$date), FUN = length)
data("florist")
florist <- read.table("C:/Users/user/Desktop/florist.txt", header = T, sep = ",")
florist_by_day <- aggregate(florist$price, by=list(florist$date), FUN = length)
View(data)
data("florist")
florist <- read.table("C:\Users\mohammed.idmoussi\Documents\R_projects/florist.txt", header = T, sep = ",")
florist_by_day <- aggregate(florist$price, by=list(florist$date), FUN = length)
florist <- read.table("C:\Users\mohammed.idmoussi\Documents\R_projects/florist.txt", header = T, sep = ",")
florist_by_day <- aggregate(florist$price, by=list(florist$date), FUN = length)
florist <- read.table("C:\Users\mohammed.idmoussi\Documents\R_projects/florist.txt", header = T, sep = ",")
florist <- read.table("C:/Users/mohammed.idmoussi/Documents/R_projects/florist.txt", header = T, sep = ",")
View(florist)
florist_by_day <- aggregate(florist$price, by=list(florist$date), FUN = length)
names(florist_by_day) <- c('date', 'no_of_bouquets')
roses <- subset(florist, florist$bouquet=="roses")
roses_by_day <- aggregate(roses$price, by = list(roses$date), FUN = sum)
plot(roses_by_day)
outval = boxplot(roses_by_day, plot=FALSE)
boxplot(roses)
summary(roses)
binning <- function(x,bin_size, FUN = mean) {
len <- length(x)
y <- vector()
for (i in 1:len){
k = i%%bin_size
if (k==0) {
k1 <- k0 + bin_size - 1
}
else {
k0 <- i-k+1
k1 <- k0 +bin_size -1
}
if (k1>len)
{
k1<-len
}
}
y[i] = FUN(x[k0,k1])
return(y)
}
roses_by_week <-roses_by_week[order(roses_by_week$year, roses_by_week$week)]
roses_by_day <- aggregate(roses$prices, by=list(roses$year, roses$week), FUN = length)
plot(roses_by_week$total,type='1')
binning <- function(x,bin_size, FUN = mean) {
len <- length(x)
y <- vector()
for (i in 1:len){
k = i%%bin_size
if (k==0) {
k1 <- k0 + bin_size - 1
}
else {
k0 <- i-k+1
k1 <- k0 +bin_size -1
}
if (k1>len)
{
k1<-len
}
}
y[i] = FUN(x[k0,k1])
return(y)
}
roses_by_week <-roses_by_week[order(roses_by_week$year, roses_by_week$week)]
install.packages("factoextra")
